# How to add a self-signed certificate to apache httpd
# on fedora platform, store certs in 
# /etc/pki/tls

mkdir -p /etc/pki/tls/certs
cd /etc/pki/tls/certs

###############################################
# create the cert
sudo openssl \
    req -x509 \
    -nodes \
    -days 365 \
    -newkey rsa:2048 \ 
    -keyout /etc/ssl/private/apache-selfsigned.key \
    -out /etc/ssl/certs/apache-selfsigned.crt

# command explainer:
openssl:    This is the basic command line tool for creating and managing OpenSSL certificates, keys, and other files.
req:        This subcommand specifies that we want to use X.509 certificate signing request (CSR) management. 
            The "X.509" is a public key infrastructure standard that SSL and TLS adheres to for its key and certificate management. 
            We want to create a new X.509 cert, so we are using this subcommand.
-x509:      This further modifies the previous subcommand by telling the utility that we want to make a self-signed certificate 
            instead of generating a certificate signing request, as would normally happen.
-nodes:     This tells OpenSSL to skip the option to secure our certificate with a passphrase. We need Apache to be able to read the file, 
            without user intervention, when the server starts up. A passphrase would prevent this from happening 
            because we would have to enter it after every restart.
-days 365:  This option sets the length of time that the certificate will be considered valid. We set it for one year here.
-newkey rsa:2048: 
            This specifies that we want to generate a new certificate and a new key at the same time. 
            We did not create the key that is required to sign the certificate in a previous step, 
            so we need to create it along with the certificate. The rsa:2048 portion tells it to make an RSA key that is 2048 bits long.
-keyout:    This line tells OpenSSL where to place the generated private key file that we are creating.
-out:       This tells OpenSSL where to place the certificate that we are creating.

# rules
*.key -> belongs in /etc/pki/tls/private
*.crt -> belongs in /etc/pki/tls/certs

# permissions 
chown root.root <files>
chmod 600 <files>

# SELinux -> i do not really understand what this does -> -Z gives some about cert_t object...
restorecon <files>

# Create a strong Diffie-Hellman group which is used in negotiating 
# Perfect Forward Secrecy with clients.
sudo openssl dhparam -out /etc/pki/tls/certs/dhparam.pem 2048

###############################################
# the default configuration for ssl is mod_ssl. 
dnf install mod_ssl 

# make a local copy of the ssl config file for backup
# Files in /etc/httpd/conf.d/ are read in alphabetical order: 
# a setting from /etc/httpd/conf.d/z-foo.conf will be used over a setting from /etc/httpd/conf.d/foo.conf. 
# Similarly, a setting from /etc/httpd/conf.d/99-foo.conf, will be used over a setting from /etc/httpd/conf.d/00-foo.conf
cp /etc/httpd/conf.d/ssl.conf /etc/httpd/conf.d/Z-ssl.conf


# edit lines containing key and cert file 
# they should then contain
SSLCertificateFile      /etc/pki/tls/certs/apache-selfsigned.crt
SSLCertificateKeyFile   /etc/pki/tls/private/apache-selfsigned.key

# must be active:
BrowserMatch "MSIE [2-6]" \
               nokeepalive ssl-unclean-shutdown \
               downgrade-1.0 force-response-1.0

# adding the diffie hellman thing to config:
SSLOpenSSLConfCmd DHParameters /etc/pki/tls/certs/dhparam.pem

###############################################
# ALSO POSSIBLE : PUTTING EVERYTHING IN HTTPD
# add to httpd.conf
<VirtualHost *:443>
    ServerAdmin admin@example.com
    ServerName www.example.com
    ServerAlias example.com

    # define global? document root for https transport?
    DocumentRoot /var/www/html

    # ssl relevant info
    SSLEngine on
    SSLCertificateFile      /etc/pki/tls/certs/example.com.crt
    SSLCertificateKeyFile   /etc/pki/tls/certs/example.com.key

    # Uncomment the following directive when using client certificate authentication
    # what is this exactly?
    #SSLCACertificateFile   /etc/pki/tls/ca-trust/ca_certs_for_client_authentication


    # HSTS (mod_headers is required) (15768000 seconds = 6 months)
    # timeouting?
    Header always set Strict-Transport-Security "max-age=15768000"
</VirtualHost>

#################################################################
# ADD TO VIRTUAL HOST
# on fedora i put this to the httpd.conf file
# other systems have a conf.d/000-default-hosts.conf file 

<VirtualHost *:80>
    Redirect permanent "/" "https://serenity.northernlights.io"
</VirtualHost>

#################################################################
# validate config
# I assume this is used for production web servers....

sudo apachectl configtest

# on digitalocean:


# does this sit in httpd.conf?
# Intermediate configuration, tweak to your needs
SSLProtocol             all -SSLv2 -SSLv3  
SSLCipherSuite          ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS  
SSLHonorCipherOrder     on  
SSLCompression          off  
SSLSessionTickets       off

# OCSP Stapling, only in httpd 2.3.3 and later
SSLUseStapling                   on  
SSLStaplingResponderTimeout      5  
SSLStaplingReturnResponderErrors off  
SSLStaplingCache                 shmcb:/var/run/ocsp(128000)
